# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""

from __future__ import absolute_import

import re

# python 2 and python 3 compatibility library
import six

from idomoo.api_client import ApiClient


class SceneApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def generate_scenes(self, body, **kwargs):
        """Generate Video from Scenes

        A scene is a video segment exported from Adobe After Effects using Idomoo’s Scene Tools. Adding several scenes together in a specific order and populating placeholders with data creates a video. The Scene API let's you do just that. You can also make a video out of a single scene.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generate_scenes(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param SceneAPIRequest body: (required)
        :return: GenerationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.generate_scenes_with_http_info(body, **kwargs)
        else:
            (data) = self.generate_scenes_with_http_info(body, **kwargs)
            return data

    def generate_scenes_with_http_info(self, body, **kwargs):
        """Generate Video from Scenes

        A scene is a video segment exported from Adobe After Effects using Idomoo’s Scene Tools. Adding several scenes together in a specific order and populating placeholders with data creates a video. The Scene API let's you do just that. You can also make a video out of a single scene.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.generate_scenes_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param SceneAPIRequest body: (required)
        :return: GenerationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_scenes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                    params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `generate_scenes`")

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # Authentication setting
        auth_settings = ['Basic authentication']

        return self.api_client.call_api(
            '/scenes/generate/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GenerationResponse',
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scene(self, scene_id, **kwargs):
        """Get Scene by ID

        Get Scene by its scene ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_scene(scene_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scene_id: (required)
        :param list[str] fields: Choose which fields should return.
        :return: SceneMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_scene_with_http_info(scene_id, **kwargs)
        else:
            (data) = self.get_scene_with_http_info(scene_id, **kwargs)
            return data

    def get_scene_with_http_info(self, scene_id, **kwargs):
        """Get Scene by ID

        Get Scene by its scene ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_scene_with_http_info(scene_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scene_id: (required)
        :param list[str] fields: Choose which fields should return.
        :return: SceneMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scene_id', 'fields']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scene" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scene_id' is set
        if ('scene_id' not in params or
                    params['scene_id'] is None):
            raise ValueError("Missing the required parameter `scene_id` when calling `get_scene`")

        collection_formats = {}

        path_params = {}
        if 'scene_id' in params:
            path_params['sceneId'] = params['scene_id']

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))
            collection_formats['fields'] = 'multi'

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['Basic authentication']

        return self.api_client.call_api(
            '/scenes/{sceneId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SceneMetadata',
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scenes(self, **kwargs):
        """List of Scenes

        List of Scenes. You can filter which fields to show, and paginate with limit and offset.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_scenes(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Choose which fields should return. `GET /scenes?fields=fps,scene_id,scene_width,scene_height` Nested fields are also supported with dot-notation.
        :param int limit: Set limit on number of results. `GET /scenes?limit=5 `
        :param int offset: Get a different set of items. You can use the offset and limit parameters in the GET request’s query string  For example, `GET /scenes?offset=5&limit=5 ` returns scenes 6..10.
        :param bool desc: Allow ascending and descending sorting. `GET /scenes?desc=true`
        :return: ScenesList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_scenes_with_http_info(**kwargs)
        else:
            (data) = self.get_scenes_with_http_info(**kwargs)
            return data

    def get_scenes_with_http_info(self, **kwargs):
        """List of Scenes

        List of Scenes. You can filter which fields to show, and paginate with limit and offset.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_scenes_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Choose which fields should return. `GET /scenes?fields=fps,scene_id,scene_width,scene_height` Nested fields are also supported with dot-notation.
        :param int limit: Set limit on number of results. `GET /scenes?limit=5 `
        :param int offset: Get a different set of items. You can use the offset and limit parameters in the GET request’s query string  For example, `GET /scenes?offset=5&limit=5 ` returns scenes 6..10.
        :param bool desc: Allow ascending and descending sorting. `GET /scenes?desc=true`
        :return: ScenesList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'limit', 'offset', 'desc']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scenes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))
        if 'limit' in params:
            query_params.append(('limit', params['limit']))
        if 'offset' in params:
            query_params.append(('offset', params['offset']))
        if 'desc' in params:
            query_params.append(('desc', params['desc']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['application/json'])

        # Authentication setting
        auth_settings = ['Basic authentication']

        return self.api_client.call_api(
            '/scenes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScenesList',
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def replace_scene(self, scene_id, idmfile, **kwargs):
        """Replace Scene

        Replace a scene with a new IDM file. The new and old scenes have to have several same features: 1. At least the same placeholders, but can have more. 2. Same frame rate (FPS). 3. Same resolution aspect ratio (width/height).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.replace_scene(scene_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scene_id: (required)
        :param str idmfile: IDM file to upload (required)
        :return: UploadScene
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.replace_scene_with_http_info(scene_id, **kwargs)
        else:
            (data) = self.replace_scene_with_http_info(scene_id, **kwargs)
            return data

    def replace_scene_with_http_info(self, scene_id, idmfile, **kwargs):
        """Replace Scene

        Replace a scene with a new IDM file. The new and old scenes have to have several same features: 1. At least the same placeholders, but can have more. 2. Same frame rate (FPS). 3. Same resolution aspect ratio (width/height).
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.replace_scene_with_http_info(scene_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scene_id: (required)
        :param str idmfile: IDM file to upload (required)
        :return: UploadScene
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scene_id', 'idmfile']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method replace_scene" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scene_id' is set
        if ('scene_id' not in params or
                    params['scene_id'] is None):
            raise ValueError("Missing the required parameter `scene_id` when calling `replace_scene`")
        if ('idmfile' not in params or
                    params['idmfile'] is None):
            raise ValueError("Missing the required parameter `idmfile` when calling `replace_scene`")

        collection_formats = {}

        path_params = {}
        if 'scene_id' in params:
            path_params['sceneId'] = params['scene_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {'file': params['idmfile']}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['multipart/form-data'])

        # Authentication setting
        auth_settings = ['Basic authentication']

        return self.api_client.call_api(
            '/scenes/{sceneId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadScene',
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_scene(self, library, idmfile, **kwargs):
        """Upload New Scene

        Upload a new scene into a Scene Library. You will need the IDM file to upload.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_scene(library, idmfile, async=True)
        >>> result = thread.get()

        :param async bool
        :param int library: Add the scene to this Scene Library. `POST /scenes/?library=1111` (required)
        :param str idmfile: IDM file to upload (required)

        :return: UploadScene
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_scene_with_http_info(library, idmfile, **kwargs)
        else:
            (data) = self.upload_scene_with_http_info(library, idmfile, **kwargs)
            return data

    def upload_scene_with_http_info(self, library, idmfile, **kwargs):
        """Upload New Scene

        Upload a new scene into a Scene Library. You will need the IDM file to upload.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_scene_with_http_info(library, async=True)
        >>> result = thread.get()

        :param async bool
        :param int library: Add the scene to this Scene Library. `POST /scenes/?library=1111` (required)
        :param str idmfile: IDM file to upload (required)

        :return: UploadScene
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['library', 'idmfile']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_scene" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'library' is set
        if ('library' not in params or
                    params['library'] is None):
            raise ValueError("Missing the required parameter `library` when calling `upload_scene`")

        if ('idmfile' not in params or
                    params['idmfile'] is None):
            raise ValueError("Missing the required parameter `idmfile` when calling `upload_scene`")

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'library' in params:
            query_params.append(('library', params['library']))

        header_params = {}

        form_params = []
        local_var_files = {'file': params['idmfile']}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(
            ['multipart/form-data'])

        # Authentication setting
        auth_settings = ['Basic authentication']

        return self.api_client.call_api(
            '/scenes/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UploadScene',
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
