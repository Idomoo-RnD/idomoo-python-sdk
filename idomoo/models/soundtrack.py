# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint
import re

import six

from idomoo import utils


class Soundtrack(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'val': 'str',
        'fade_start': 'float',
        'fade_end': 'float',
        'volume': 'float',
        'sidechain_compression_amount': 'float'
    }

    attribute_map = {
        'val': 'val',
        'fade_start': 'fade_start',
        'fade_end': 'fade_end',
        'volume': 'volume',
        'sidechain_compression_amount': 'sidechain_compression_amount'
    }

    def __init__(self, val=None, fade_start=None, fade_end=None, volume=None, sidechain_compression_amount=None):
        """Soundtrack - a model defined in Swagger"""

        self._val = None
        self._fade_start = None
        self._fade_end = None
        self._volume = None
        self._sidechain_compression_amount = None
        self.discriminator = None

        self.val = val
        if fade_start is not None:
            self.fade_start = fade_start
        if fade_end is not None:
            self.fade_end = fade_end
        if volume is not None:
            self.volume = volume
        if sidechain_compression_amount is not None:
            self.sidechain_compression_amount = sidechain_compression_amount

    @property
    def val(self):
        """Gets the val of this Soundtrack.

        Path to the audio file of your soundtrack.  Use a path to external files or files held on Idomoo servers.
        More about paths can be found [here](https://academy.idomoo.com/support/solutions/articles/4000068850).
        Preferably a wav or mp3 file.

        :return: The val of this Soundtrack.
        :rtype: str
        """
        return self._val

    @val.setter
    def val(self, val):
        """Sets the val of this Soundtrack.

        Path to the audio file of your soundtrack.  Use a path to external files or files held on Idomoo servers.
        More about paths can be found [here](https://academy.idomoo.com/support/solutions/articles/4000068850).
        Preferably a wav or mp3 file.

        :param val: The val of this Soundtrack.
        :type: str
        """
        if val is None:
            raise ValueError("Invalid value for `val`, must not be `None`")
        if val is not None and not re.search(utils.VALID_ASSET_PATH_REGEX, val):
            raise ValueError("Invalid value for `val`, must be a follow pattern or equal to `%s`"
                             % utils.VALID_ASSET_PATH_REGEX)

        self._val = val

    @property
    def fade_start(self):
        """Gets the fade_start of this Soundtrack.

        Fade in of sound from no sound to the level specified in volume. How many seconds should the fade take. 0
        means no fade.

        :return: The fade_start of this Soundtrack.
        :rtype: float
        """
        return self._fade_start

    @fade_start.setter
    def fade_start(self, fade_start):
        """Sets the fade_start of this Soundtrack.

        Fade in of sound from no sound to the level specified in volume. How many seconds should the fade take. 0
        means no fade.

        :param fade_start: The fade_start of this Soundtrack.
        :type: float
        """

        self._fade_start = fade_start

    @property
    def fade_end(self):
        """Gets the fade_end of this Soundtrack.

        Fade out the sound from the level specified in volume to no sound. How many seconds should the fade take. 0
        means no fade.

        :return: The fade_end of this Soundtrack.
        :rtype: float
        """
        return self._fade_end

    @fade_end.setter
    def fade_end(self, fade_end):
        """Sets the fade_end of this Soundtrack.

        Fade out the sound from the level specified in volume to no sound. How many seconds should the fade take. 0
        means no fade.

        :param fade_end: The fade_end of this Soundtrack.
        :type: float
        """

        self._fade_end = fade_end

    @property
    def volume(self):
        """Gets the volume of this Soundtrack.

        How many dB to add to the level of the sound.

        :return: The volume of this Soundtrack.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Soundtrack.

        How many dB to add to the level of the sound.

        :param volume: The volume of this Soundtrack.
        :type: float
        """

        self._volume = volume

    @property
    def sidechain_compression_amount(self):
        """Gets the sidechain_compression_amount of this Soundtrack.

        Sidechain compression means other audio placeholders can change the level of the soundtrack's volume. Only
        placeholder that have `\"sidechain_compression_affect\":true` will affect the soundtrack's volume. Specify by
        how many dB to add to the volume. This will usually be a negative number.

        :return: The sidechain_compression_amount of this Soundtrack.
        :rtype: float
        """
        return self._sidechain_compression_amount

    @sidechain_compression_amount.setter
    def sidechain_compression_amount(self, sidechain_compression_amount):
        """Sets the sidechain_compression_amount of this Soundtrack.

        Sidechain compression means other audio placeholders can change the level of the soundtrack's volume. Only
        placeholder that have `\"sidechain_compression_affect\":true` will affect the soundtrack's volume. Specify by
        how many dB to add to the volume. This will usually be a negative number.

        :param sidechain_compression_amount: The sidechain_compression_amount of this Soundtrack.
        :type: float
        """

        self._sidechain_compression_amount = sidechain_compression_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Soundtrack):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
