# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint
import re

import six

from idomoo.models.scene_metadata_audio import SceneMetadataAudio
from idomoo.models.scene_metadata_media import SceneMetadataMedia
from idomoo.models.scene_metadata_text import SceneMetadataText


class SceneMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scene_status': 'str',
        'scene_id': 'float',
        'scene_name': 'str',
        'scene_height': 'int',
        'scene_width': 'float',
        'duration_in_seconds': 'float',
        'fps': 'float',
        'media': 'list[SceneMetadataMedia]',
        'text': 'list[SceneMetadataText]',
        'audio': 'list[SceneMetadataAudio]',
        'video': 'str',
        'thumbnail': 'str',
        'idm_format_version': 'str'
    }

    attribute_map = {
        'scene_status': 'scene_status',
        'scene_id': 'scene_id',
        'scene_name': 'scene_name',
        'scene_height': 'scene_height',
        'scene_width': 'scene_width',
        'duration_in_seconds': 'duration_in_seconds',
        'fps': 'fps',
        'media': 'media',
        'text': 'text',
        'audio': 'audio',
        'video': 'video',
        'thumbnail': 'thumbnail',
        'idm_format_version': 'idm_format_version'
    }

    def __init__(self, scene_status=None, scene_id=None, scene_name=None, scene_height=None, scene_width=None, duration_in_seconds=None, fps=None, media=None, text=None, audio=None, video=None, thumbnail=None, idm_format_version=None):
        """SceneMetadata - a model defined in Swagger"""

        self._scene_status = None
        self._scene_id = None
        self._scene_name = None
        self._scene_height = None
        self._scene_width = None
        self._duration_in_seconds = None
        self._fps = None
        self._media = None
        self._text = None
        self._audio = None
        self._video = None
        self._thumbnail = None
        self._idm_format_version = None
        self.discriminator = None

        if scene_status is not None:
            self.scene_status = scene_status
        self.scene_id = scene_id
        if scene_name is not None:
            self.scene_name = scene_name
        if scene_height is not None:
            self.scene_height = scene_height
        if scene_width is not None:
            self.scene_width = scene_width
        if duration_in_seconds is not None:
            self.duration_in_seconds = duration_in_seconds
        if fps is not None:
            self.fps = fps
        if media is not None:
            self.media = media
        if text is not None:
            self.text = text
        if audio is not None:
            self.audio = audio
        if video is not None:
            self.video = video
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if idm_format_version is not None:
            self.idm_format_version = idm_format_version

    @property
    def scene_status(self):
        """Gets the scene_status of this SceneMetadata.


        :return: The scene_status of this SceneMetadata.
        :rtype: str
        """
        return self._scene_status

    @scene_status.setter
    def scene_status(self, scene_status):
        """Sets the scene_status of this SceneMetadata.


        :param scene_status: The scene_status of this SceneMetadata.
        :type: str
        """

        self._scene_status = scene_status

    @property
    def scene_id(self):
        """Gets the scene_id of this SceneMetadata.

        The ID of the scene.

        :return: The scene_id of this SceneMetadata.
        :rtype: float
        """
        return self._scene_id

    @scene_id.setter
    def scene_id(self, scene_id):
        """Sets the scene_id of this SceneMetadata.

        The ID of the scene.

        :param scene_id: The scene_id of this SceneMetadata.
        :type: float
        """
        if scene_id is None:
            raise ValueError("Invalid value for `scene_id`, must not be `None`")

        self._scene_id = scene_id

    @property
    def scene_name(self):
        """Gets the scene_name of this SceneMetadata.

        A descriptive name of the scene. This is usually the name of the composition in After Effects, unless changed.

        :return: The scene_name of this SceneMetadata.
        :rtype: str
        """
        return self._scene_name

    @scene_name.setter
    def scene_name(self, scene_name):
        """Sets the scene_name of this SceneMetadata.

        A descriptive name of the scene. This is usually the name of the composition in After Effects, unless changed.

        :param scene_name: The scene_name of this SceneMetadata.
        :type: str
        """

        self._scene_name = scene_name

    @property
    def scene_height(self):
        """Gets the scene_height of this SceneMetadata.

        The resolution width of the scene in pixels.

        :return: The scene_height of this SceneMetadata.
        :rtype: int
        """
        return self._scene_height

    @scene_height.setter
    def scene_height(self, scene_height):
        """Sets the scene_height of this SceneMetadata.

        The resolution width of the scene in pixels.

        :param scene_height: The scene_height of this SceneMetadata.
        :type: int
        """

        self._scene_height = scene_height

    @property
    def scene_width(self):
        """Gets the scene_width of this SceneMetadata.

        The resolution height of the scene in pixels.

        :return: The scene_width of this SceneMetadata.
        :rtype: float
        """
        return self._scene_width

    @scene_width.setter
    def scene_width(self, scene_width):
        """Sets the scene_width of this SceneMetadata.

        The resolution height of the scene in pixels.

        :param scene_width: The scene_width of this SceneMetadata.
        :type: float
        """

        self._scene_width = scene_width

    @property
    def duration_in_seconds(self):
        """Gets the duration_in_seconds of this SceneMetadata.

        The duration of the scene in seconds.

        :return: The duration_in_seconds of this SceneMetadata.
        :rtype: float
        """
        return self._duration_in_seconds

    @duration_in_seconds.setter
    def duration_in_seconds(self, duration_in_seconds):
        """Sets the duration_in_seconds of this SceneMetadata.

        The duration of the scene in seconds.

        :param duration_in_seconds: The duration_in_seconds of this SceneMetadata.
        :type: float
        """

        self._duration_in_seconds = duration_in_seconds

    @property
    def fps(self):
        """Gets the fps of this SceneMetadata.


        :return: The fps of this SceneMetadata.
        :rtype: float
        """
        return self._fps

    @fps.setter
    def fps(self, fps):
        """Sets the fps of this SceneMetadata.


        :param fps: The fps of this SceneMetadata.
        :type: float
        """

        self._fps = fps

    @property
    def media(self):
        """Gets the media of this SceneMetadata.


        :return: The media of this SceneMetadata.
        :rtype: list[SceneMetadataMedia]
        """
        return self._media

    @media.setter
    def media(self, media):
        """Sets the media of this SceneMetadata.


        :param media: The media of this SceneMetadata.
        :type: list[SceneMetadataMedia]
        """

        self._media = media

    @property
    def text(self):
        """Gets the text of this SceneMetadata.


        :return: The text of this SceneMetadata.
        :rtype: list[SceneMetadataText]
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SceneMetadata.


        :param text: The text of this SceneMetadata.
        :type: list[SceneMetadataText]
        """

        self._text = text

    @property
    def audio(self):
        """Gets the audio of this SceneMetadata.


        :return: The audio of this SceneMetadata.
        :rtype: list[SceneMetadataAudio]
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this SceneMetadata.


        :param audio: The audio of this SceneMetadata.
        :type: list[SceneMetadataAudio]
        """

        self._audio = audio

    @property
    def video(self):
        """Gets the video of this SceneMetadata.


        :return: The video of this SceneMetadata.
        :rtype: str
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this SceneMetadata.


        :param video: The video of this SceneMetadata.
        :type: str
        """

        self._video = video

    @property
    def thumbnail(self):
        """Gets the thumbnail of this SceneMetadata.


        :return: The thumbnail of this SceneMetadata.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this SceneMetadata.


        :param thumbnail: The thumbnail of this SceneMetadata.
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def idm_format_version(self):
        """Gets the idm_format_version of this SceneMetadata.


        :return: The idm_format_version of this SceneMetadata.
        :rtype: str
        """
        return self._idm_format_version

    @idm_format_version.setter
    def idm_format_version(self, idm_format_version):
        """Sets the idm_format_version of this SceneMetadata.


        :param idm_format_version: The idm_format_version of this SceneMetadata.
        :type: str
        """

        self._idm_format_version = idm_format_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SceneMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
