# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint

import six

from idomoo.models.accessibility_response import AccessibilityResponse
from idomoo.models.gif_output_response import GifOutputResponse
from idomoo.models.jpg_output_response import JPGOutputResponse
from idomoo.models.video_output_response import VideoOutputResponse


class OutputResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'video': 'list[VideoOutputResponse]',
        'gif': 'list[GifOutputResponse]',
        'jpg': 'list[JPGOutputResponse]',
        'accessibility': 'AccessibilityResponse'
    }

    attribute_map = {
        'video': 'video',
        'gif': 'gif',
        'jpg': 'jpg',
        'accessibility': 'accessibility'
    }

    def __init__(self, video=None, gif=None, jpg=None, accessibility=None):
        """OutputResponse - a model defined in Swagger"""

        self._video = None
        self._gif = None
        self._jpg = None
        self._accessibility = None
        self.discriminator = None

        if video is not None:
            self.video = video
        if gif is not None:
            self.gif = gif
        if jpg is not None:
            self.jpg = jpg
        if accessibility is not None:
            self.accessibility = accessibility

    @property
    def video(self):
        """Gets the video of this OutputResponse.

        All video requests returned here.

        :return: The video of this OutputResponse.
        :rtype: list[VideoOutputResponse]
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this OutputResponse.

        All video requests returned here.

        :param video: The video of this OutputResponse.
        :type: list[VideoOutputResponse]
        """

        self._video = video

    @property
    def gif(self):
        """Gets the gif of this OutputResponse.

        All GIFs requests returned here.

        :return: The gif of this OutputResponse.
        :rtype: list[GifOutputResponse]
        """
        return self._gif

    @gif.setter
    def gif(self, gif):
        """Sets the gif of this OutputResponse.

        All GIFs requests returned here.

        :param gif: The gif of this OutputResponse.
        :type: list[GifOutputResponse]
        """

        self._gif = gif

    @property
    def jpg(self):
        """Gets the jpg of this OutputResponse.

        All JPGs requests returned here.

        :return: The jpg of this OutputResponse.
        :rtype: list[JPGOutputResponse]
        """
        return self._jpg

    @jpg.setter
    def jpg(self, jpg):
        """Sets the jpg of this OutputResponse.

        All JPGs requests returned here.

        :param jpg: The jpg of this OutputResponse.
        :type: list[JPGOutputResponse]
        """

        self._jpg = jpg

    @property
    def accessibility(self):
        """Gets the accessibility of this OutputResponse.


        :return: The accessibility of this OutputResponse.
        :rtype: AccessibilityResponse
        """
        return self._accessibility

    @accessibility.setter
    def accessibility(self, accessibility):
        """Sets the accessibility of this OutputResponse.


        :param accessibility: The accessibility of this OutputResponse.
        :type: AccessibilityResponse
        """

        self._accessibility = accessibility

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutputResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
