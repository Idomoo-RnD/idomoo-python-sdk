# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint
import re

import six

from idomoo.models.accessibility_response_caption_links import AccessibilityResponseCaptionLinks
from idomoo.models.accessibility_response_transcript_links import AccessibilityResponseTranscriptLinks


class AccessibilityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transcript_links': 'list[AccessibilityResponseTranscriptLinks]',
        'caption_links': 'list[AccessibilityResponseCaptionLinks]'
    }

    attribute_map = {
        'transcript_links': 'transcript_links',
        'caption_links': 'caption_links'
    }

    def __init__(self, transcript_links=None, caption_links=None):
        """AccessibilityResponse - a model defined in Swagger"""

        self._transcript_links = None
        self._caption_links = None
        self.discriminator = None

        if transcript_links is not None:
            self.transcript_links = transcript_links
        if caption_links is not None:
            self.caption_links = caption_links

    @property
    def transcript_links(self):
        """Gets the transcript_links of this AccessibilityResponse.

        Array of transcript outputs.

        :return: The transcript_links of this AccessibilityResponse.
        :rtype: list[AccessibilityResponseTranscriptLinks]
        """
        return self._transcript_links

    @transcript_links.setter
    def transcript_links(self, transcript_links):
        """Sets the transcript_links of this AccessibilityResponse.

        Array of transcript outputs.

        :param transcript_links: The transcript_links of this AccessibilityResponse.
        :type: list[AccessibilityResponseTranscriptLinks]
        """

        self._transcript_links = transcript_links

    @property
    def caption_links(self):
        """Gets the caption_links of this AccessibilityResponse.

        Array of caption outputs.

        :return: The caption_links of this AccessibilityResponse.
        :rtype: list[AccessibilityResponseCaptionLinks]
        """
        return self._caption_links

    @caption_links.setter
    def caption_links(self, caption_links):
        """Sets the caption_links of this AccessibilityResponse.

        Array of caption outputs.

        :param caption_links: The caption_links of this AccessibilityResponse.
        :type: list[AccessibilityResponseCaptionLinks]
        """

        self._caption_links = caption_links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessibilityResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
