# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint
import re

import six

from idomoo.models.gif_output_response_links import GifOutputResponseLinks


class JPGOutputResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'height': 'float',
        'time': 'float',
        'suffix': 'str',
        'cost': 'float',
        'links': 'GifOutputResponseLinks'
    }

    attribute_map = {
        'height': 'height',
        'time': 'time',
        'suffix': 'suffix',
        'cost': 'cost',
        'links': 'links'
    }

    def __init__(self, height=None, time=None, suffix=None, cost=None, links=None):
        """JPGOutputResponse - a model defined in Swagger"""

        self._height = None
        self._time = None
        self._suffix = None
        self._cost = None
        self._links = None
        self.discriminator = None

        self.height = height
        self.time = time
        if suffix is not None:
            self.suffix = suffix
        self.cost = cost
        self.links = links

    @property
    def height(self):
        """Gets the height of this JPGOutputResponse.

        Height of the media rendered, in pixels. The width was automatically calculated to keep the aspect ratio.

        :return: The height of this JPGOutputResponse.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this JPGOutputResponse.

        Height of the media rendered, in pixels. The width was automatically calculated to keep the aspect ratio.

        :param height: The height of this JPGOutputResponse.
        :type: float
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def time(self):
        """Gets the time of this JPGOutputResponse.

        The frame of the video that was rendered. Can also be negative number that will be calculated from the end of the video.

        :return: The time of this JPGOutputResponse.
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this JPGOutputResponse.

        The frame of the video that was rendered. Can also be negative number that will be calculated from the end of the video.

        :param time: The time of this JPGOutputResponse.
        :type: float
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def suffix(self):
        """Gets the suffix of this JPGOutputResponse.

        The suffix to the file name, if requested.

        :return: The suffix of this JPGOutputResponse.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this JPGOutputResponse.

        The suffix to the file name, if requested.

        :param suffix: The suffix of this JPGOutputResponse.
        :type: str
        """

        self._suffix = suffix

    @property
    def cost(self):
        """Gets the cost of this JPGOutputResponse.

        Cost of the render in credits. A credit is 30 seconds or less.  JPGs don't cost if created from the video.

        :return: The cost of this JPGOutputResponse.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this JPGOutputResponse.

        Cost of the render in credits. A credit is 30 seconds or less.  JPGs don't cost if created from the video.

        :param cost: The cost of this JPGOutputResponse.
        :type: float
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def links(self):
        """Gets the links of this JPGOutputResponse.


        :return: The links of this JPGOutputResponse.
        :rtype: GifOutputResponseLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this JPGOutputResponse.


        :param links: The links of this JPGOutputResponse.
        :type: GifOutputResponseLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JPGOutputResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
