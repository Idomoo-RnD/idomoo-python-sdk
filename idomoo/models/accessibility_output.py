# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint

import six


class AccessibilityOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'caption_languages': 'list[str]',
        'transcript_languages': 'list[str]'
    }

    attribute_map = {
        'caption_languages': 'caption_languages',
        'transcript_languages': 'transcript_languages'
    }

    def __init__(self, caption_languages=None, transcript_languages=None):
        """AccessibilityOutput - a model defined in Swagger"""

        self._caption_languages = None
        self._transcript_languages = None
        self.discriminator = None

        if caption_languages is not None:
            self.caption_languages = caption_languages
        if transcript_languages is not None:
            self.transcript_languages = transcript_languages

    @property
    def caption_languages(self):
        """Gets the caption_languages of this AccessibilityOutput.

        Specify which languages are needed for caption. Not passing this means no captions.

        :return: The caption_languages of this AccessibilityOutput.
        :rtype: list[str]
        """
        return self._caption_languages

    @caption_languages.setter
    def caption_languages(self, caption_languages):
        """Sets the caption_languages of this AccessibilityOutput.

        Specify which languages are needed for caption. Not passing this means no captions.

        :param caption_languages: The caption_languages of this AccessibilityOutput.
        :type: list[str]
        """

        self._caption_languages = caption_languages

    @property
    def transcript_languages(self):
        """Gets the transcript_languages of this AccessibilityOutput.

        Specify which languages are needed for transcript. Not passing this means no transcript.

        :return: The transcript_languages of this AccessibilityOutput.
        :rtype: list[str]
        """
        return self._transcript_languages

    @transcript_languages.setter
    def transcript_languages(self, transcript_languages):
        """Sets the transcript_languages of this AccessibilityOutput.

        Specify which languages are needed for transcript. Not passing this means no transcript.

        :param transcript_languages: The transcript_languages of this AccessibilityOutput.
        :type: list[str]
        """

        self._transcript_languages = transcript_languages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessibilityOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
