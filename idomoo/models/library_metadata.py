# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint

import six


class LibraryMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'library_id': 'int',
        'name': 'str',
        'description': 'str',
        'thumbnail': 'str',
        'scenes': 'list[int]'
    }

    attribute_map = {
        'library_id': 'library_id',
        'name': 'name',
        'description': 'description',
        'thumbnail': 'thumbnail',
        'scenes': 'scenes'
    }

    def __init__(self, library_id=None, name=None, description=None, thumbnail=None, scenes=None):
        """LibraryMetadata - a model defined in Swagger"""

        self._id = None
        self._name = None
        self._description = None
        self._thumbnail = None
        self._scenes = None
        self.discriminator = None

        self.library_id = library_id
        self.name = name
        if description is not None:
            self.description = description
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if scenes is not None:
            self.scenes = scenes

    @property
    def library_id(self):
        """Gets the library_id of this LibraryMetadata.

        The Scene Library ID

        :return: The library_id of this LibraryMetadata.
        :rtype: int
        """
        return self._id

    @library_id.setter
    def library_id(self, library_id):
        """Sets the library_id of this LibraryMetadata.

        The Scene Library ID

        :param library_id: The library_id of this LibraryMetadata.
        :type: int
        """
        if library_id is None:
            raise ValueError("Invalid value for `library_id`, must not be `None`")

        self._id = library_id

    @property
    def name(self):
        """Gets the name of this LibraryMetadata.

        A descriptive name for the Scene Library.

        :return: The name of this LibraryMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LibraryMetadata.

        A descriptive name for the Scene Library.

        :param name: The name of this LibraryMetadata.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """Gets the description of this LibraryMetadata.

        A description of the Scene Library. What’s its purpose?

        :return: The description of this LibraryMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LibraryMetadata.

        A description of the Scene Library. What’s its purpose?

        :param description: The description of this LibraryMetadata.
        :type: str
        """

        self._description = description

    @property
    def thumbnail(self):
        """Gets the thumbnail of this LibraryMetadata.

        In the Storybuilding Suite user interface the Scene Library is represented by a thumbnail image. This is that
        image.

        :return: The thumbnail of this LibraryMetadata.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this LibraryMetadata.

        In the Storybuilding Suite user interface the Scene Library is represented by a thumbnail image. This is that
        image.

        :param thumbnail: The thumbnail of this LibraryMetadata.
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def scenes(self):
        """Gets the scenes of this LibraryMetadata.

        A list of the Scene IDs for the scenes in this Scene Library.

        :return: The scenes of this LibraryMetadata.
        :rtype: list[int]
        """
        return self._scenes

    @scenes.setter
    def scenes(self, scenes):
        """Sets the scenes of this LibraryMetadata.

        A list of the Scene IDs for the scenes in this Scene Library.

        :param scenes: The scenes of this LibraryMetadata.
        :type: list[int]
        """

        self._scenes = scenes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LibraryMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
