# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint
import re

import six

from idomoo.models.storyboard_metadata import StoryboardMetadata


class StoryboardList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_count': 'int',
        'storyboards': 'list[StoryboardMetadata]'
    }

    attribute_map = {
        'item_count': 'item_count',
        'storyboards': 'storyboards'
    }

    def __init__(self, item_count=None, storyboards=None):
        """StoryboardList - a model defined in Swagger"""

        self._item_count = None
        self._storyboards = None
        self.discriminator = None

        if item_count is not None:
            self.item_count = item_count
        if storyboards is not None:
            self.storyboards = storyboards

    @property
    def item_count(self):
        """Gets the item_count of this StoryboardList.


        :return: The item_count of this StoryboardList.
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count):
        """Sets the item_count of this StoryboardList.


        :param item_count: The item_count of this StoryboardList.
        :type: int
        """

        self._item_count = item_count

    @property
    def storyboards(self):
        """Gets the storyboards of this StoryboardList.


        :return: The storyboards of this StoryboardList.
        :rtype: list[StoryboardMetadata]
        """
        return self._storyboards

    @storyboards.setter
    def storyboards(self, storyboards):
        """Sets the storyboards of this StoryboardList.


        :param storyboards: The storyboards of this StoryboardList.
        :type: list[StoryboardMetadata]
        """

        self._storyboards = storyboards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoryboardList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
