# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint
import re

import six


class UploadScene(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scene_id': 'float',
        'ref': 'str'
    }

    attribute_map = {
        'scene_id': 'scene_id',
        'ref': 'ref'
    }

    def __init__(self, scene_id=None, ref=None):
        """UploadScene - a model defined in Swagger"""

        self._scene_id = None
        self._ref = None
        self.discriminator = None

        self.scene_id = scene_id
        self.ref = ref

    @property
    def scene_id(self):
        """Gets the scene_id of this UploadScene.


        :return: The scene_id of this UploadScene.
        :rtype: float
        """
        return self._scene_id

    @scene_id.setter
    def scene_id(self, scene_id):
        """Sets the scene_id of this UploadScene.


        :param scene_id: The scene_id of this UploadScene.
        :type: float
        """
        if scene_id is None:
            raise ValueError("Invalid value for `scene_id`, must not be `None`")

        self._scene_id = scene_id

    @property
    def ref(self):
        """Gets the ref of this UploadScene.


        :return: The ref of this UploadScene.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this UploadScene.


        :param ref: The ref of this UploadScene.
        :type: str
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")

        self._ref = ref

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadScene):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
