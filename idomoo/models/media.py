# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint
import re

import six

from idomoo import utils


class Media(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'val': 'str',
        'alignment_scale_type': 'str',
        'alignment_scale': 'float',
        'alignment_x_align': 'float',
        'alignment_y_align': 'float',
        'if_longer': 'str',
        'mute': 'bool',
        'fade_start': 'float',
        'fade_end': 'float',
        'volume': 'float',
        'sidechain_compression_affect': 'bool',
        'duration_referrer': 'bool',
        'duration_addition': 'float',
        'is_hidden': 'bool'
    }

    attribute_map = {
        'key': 'key',
        'val': 'val',
        'alignment_scale_type': 'alignment_scale_type',
        'alignment_scale': 'alignment_scale',
        'alignment_x_align': 'alignment_x_align',
        'alignment_y_align': 'alignment_y_align',
        'if_longer': 'if_longer',
        'mute': 'mute',
        'fade_start': 'fade_start',
        'fade_end': 'fade_end',
        'volume': 'volume',
        'sidechain_compression_affect': 'sidechain_compression_affect',
        'duration_referrer': 'duration_referrer',
        'duration_addition': 'duration_addition',
        'is_hidden': 'is_hidden'
    }

    def __init__(self, key, val, alignment_scale_type='fit', alignment_scale=None, alignment_x_align=None,
                 alignment_y_align=None, if_longer='cut', mute=False, fade_start=None, fade_end=None, volume=None,
                 sidechain_compression_affect=False, duration_referrer=False, duration_addition=None, is_hidden=False):
        """Media - a model defined in Swagger"""

        self._key = None
        self._val = None
        self._alignment_scale_type = None
        self._alignment_scale = None
        self._alignment_x_align = None
        self._alignment_y_align = None
        self._if_longer = None
        self._mute = None
        self._fade_start = None
        self._fade_end = None
        self._volume = None
        self._sidechain_compression_affect = None
        self._duration_referrer = None
        self._duration_addition = None
        self._is_hidden = None
        self.discriminator = None

        self.key = key
        self.val = val
        if alignment_scale_type is not None:
            self.alignment_scale_type = alignment_scale_type
        if alignment_scale is not None:
            self.alignment_scale = alignment_scale
        if alignment_x_align is not None:
            self.alignment_x_align = alignment_x_align
        if alignment_y_align is not None:
            self.alignment_y_align = alignment_y_align
        if if_longer is not None:
            self.if_longer = if_longer
        if mute is not None:
            self.mute = mute
        if fade_start is not None:
            self.fade_start = fade_start
        if fade_end is not None:
            self.fade_end = fade_end
        if volume is not None:
            self.volume = volume
        if sidechain_compression_affect is not None:
            self.sidechain_compression_affect = sidechain_compression_affect
        if duration_referrer is not None:
            self.duration_referrer = duration_referrer
        if duration_addition is not None:
            self.duration_addition = duration_addition
        if is_hidden is not None:
            self.is_hidden = is_hidden

    @property
    def key(self):
        """Gets the key of this Media.

        Name of placeholder from After Effects as it appears in the scene.

        :return: The key of this Media.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Media.

        Name of placeholder from After Effects as it appears in the scene.

        :param key: The key of this Media.
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def val(self):
        """Gets the val of this Media.

        The path to the content to be placed in the media placeholder. * For images and video use a path to external
        files or files held on Idomoo servers. More about paths can be found [here](
        https://academy.idomoo.com/support/solutions/articles/4000068850). * For color use this syntax: `\"rgb(###,
        ###, ###)\"`. Use 8bit color ranging from `0-255`.

        :return: The val of this Media.
        :rtype: str
        """
        return self._val

    @val.setter
    def val(self, val):
        """Sets the val of this Media.

        The path to the content to be placed in the media placeholder. * For images and video use a path to external
        files or files held on Idomoo servers. More about paths can be found [here](
        https://academy.idomoo.com/support/solutions/articles/4000068850). * For color use this syntax: `\"rgb(###,
        ###, ###)\"`. Use 8bit color ranging from `0-255`.

        :param val: The val of this Media.
        :type: str
        """
        if val is None:
            raise ValueError("Invalid value for `val`, must not be `None`")
        if val is not None and not re.search(utils.VALID_MEDIA_ASSET_PATH_REGEX, val):
            raise ValueError("Invalid value for `val`, must be a follow pattern or equal to `%s`"
                             % utils.VALID_MEDIA_ASSET_PATH_REGEX)

        self._val = val

    @property
    def alignment_scale_type(self):
        """Gets the alignment_scale_type of this Media.

        How to scale the image or video media in case it's not the same dimensions as the placeholder. * Fit: scale
        the media up or down so it's completely visible in the video's resolution. If not the same aspect ratio,
        transparency is added around the image according to the alignment settings. * Fill: scale the media up or
        down so it completely fills the video. If not the same aspect ratio, the image is cropped according to the
        alignment settings.  * Custom: scale the media by a specific multiplier. Used with `\"alignment_scale\"`.
        Colors fill the placeholder completely.  Media is always cropped inside the placeholder.

        :return: The alignment_scale_type of this Media.
        :rtype: str
        """
        return self._alignment_scale_type

    @alignment_scale_type.setter
    def alignment_scale_type(self, alignment_scale_type):
        """Sets the alignment_scale_type of this Media.

        How to scale the image or video media in case it's not the same dimensions as the placeholder. * Fit: scale
        the media up or down so it's completely visible in the video's resolution. If not the same aspect ratio,
        transparency is added around the image according to the alignment settings. * Fill: scale the media up or
        down so it completely fills the video. If not the same aspect ratio, the image is cropped according to the
        alignment settings.  * Custom: scale the media by a specific multiplier. Used with `\"alignment_scale\"`.
        Colors fill the placeholder completely.  Media is always cropped inside the placeholder.

        :param alignment_scale_type: The alignment_scale_type of this Media.
        :type: str
        """
        allowed_values = ["fit", "fill", "custom"]
        if alignment_scale_type not in allowed_values:
            raise ValueError(
                "Invalid value for `alignment_scale_type` ({0}), must be one of {1}"
                .format(alignment_scale_type, allowed_values)
            )

        self._alignment_scale_type = alignment_scale_type

    @property
    def alignment_scale(self):
        """Gets the alignment_scale of this Media.

        By how much to scale the image. Must be used if `\"alignment_scale_type\"` is set to `\"custom\"`.

        :return: The alignment_scale of this Media.
        :rtype: float
        """
        return self._alignment_scale

    @alignment_scale.setter
    def alignment_scale(self, alignment_scale):
        """Sets the alignment_scale of this Media.

        By how much to scale the image. Must be used if `\"alignment_scale_type\"` is set to `\"custom\"`.

        :param alignment_scale: The alignment_scale of this Media.
        :type: float
        """
        if alignment_scale is not None and alignment_scale < 0:
            raise ValueError("Invalid value for `alignment_scale`, must be a value greater than or equal to `0`")

        self._alignment_scale = alignment_scale

    @property
    def alignment_x_align(self):
        """Gets the alignment_x_align of this Media.

        Alignment of media inside the placeholder in case the media doesn’t fit the placeholder perfectly. This is
        for the horizontal X axis. 0 is left, 0.5 is center, and 1 is right.

        :return: The alignment_x_align of this Media.
        :rtype: float
        """
        return self._alignment_x_align

    @alignment_x_align.setter
    def alignment_x_align(self, alignment_x_align):
        """Sets the alignment_x_align of this Media.

        Alignment of media inside the placeholder in case the media doesn’t fit the placeholder perfectly. This is
        for the horizontal X axis. 0 is left, 0.5 is center, and 1 is right.

        :param alignment_x_align: The alignment_x_align of this Media.
        :type: float
        """
        if alignment_x_align is not None and alignment_x_align > 1:
            raise ValueError("Invalid value for `alignment_x_align`, must be a value less than or equal to `1`")
        if alignment_x_align is not None and alignment_x_align < 0:
            raise ValueError("Invalid value for `alignment_x_align`, must be a value greater than or equal to `0`")

        self._alignment_x_align = alignment_x_align

    @property
    def alignment_y_align(self):
        """Gets the alignment_y_align of this Media.

        Alignment of media inside the placeholder in case the media doesn’t fit the placeholder perfectly. This is
        for the vertical Y axis. 0 is top, 0.5 is middle, and 1 is bottom.

        :return: The alignment_y_align of this Media.
        :rtype: float
        """
        return self._alignment_y_align

    @alignment_y_align.setter
    def alignment_y_align(self, alignment_y_align):
        """Sets the alignment_y_align of this Media.

        Alignment of media inside the placeholder in case the media doesn’t fit the placeholder perfectly. This is
        for the vertical Y axis. 0 is top, 0.5 is middle, and 1 is bottom.

        :param alignment_y_align: The alignment_y_align of this Media.
        :type: float
        """
        if alignment_y_align is not None and alignment_y_align > 1:
            raise ValueError("Invalid value for `alignment_y_align`, must be a value less than or equal to `1`")
        if alignment_y_align is not None and alignment_y_align < 0:
            raise ValueError("Invalid value for `alignment_y_align`, must be a value greater than or equal to `0`")

        self._alignment_y_align = alignment_y_align

    @property
    def if_longer(self):
        """Gets the if_longer of this Media.

        Only used with video media assets.  If the video is shorter than the placeholder, what to do with the video.
        * Cut: cut the placeholder. Nothing is scene after the media is finished. * Loop: loop the video so it
        repeats. * Hold: hold the last frame of the video frozen.

        :return: The if_longer of this Media.
        :rtype: str
        """
        return self._if_longer

    @if_longer.setter
    def if_longer(self, if_longer):
        """Sets the if_longer of this Media.

        Only used with video media assets.  If the video is shorter than the placeholder, what to do with the video.
        * Cut: cut the placeholder. Nothing is scene after the media is finished. * Loop: loop the video so it
        repeats. * Hold: hold the last frame of the video frozen.

        :param if_longer: The if_longer of this Media.
        :type: str
        """
        allowed_values = ["cut", "loop", "hold"]
        if if_longer not in allowed_values:
            raise ValueError(
                "Invalid value for `if_longer` ({0}), must be one of {1}"
                .format(if_longer, allowed_values)
            )

        self._if_longer = if_longer

    @property
    def mute(self):
        """Gets the mute of this Media.

        Only used with video media assets that contain audio.  If the video contains audio you don't want to be used,
        make this True.

        :return: The mute of this Media.
        :rtype: bool
        """
        return self._mute

    @mute.setter
    def mute(self, mute):
        """Sets the mute of this Media.

        Only used with video media assets that contain audio.  If the video contains audio you don't want to be used,
        make this True.

        :param mute: The mute of this Media.
        :type: bool
        """

        self._mute = mute

    @property
    def fade_start(self):
        """Gets the fade_start of this Media.

        Only used with video media assets that contain audio.  Fade in of sound from no sound to the level specified
        in volume. How many seconds should the fade take. 0 means no fade.

        :return: The fade_start of this Media.
        :rtype: float
        """
        return self._fade_start

    @fade_start.setter
    def fade_start(self, fade_start):
        """Sets the fade_start of this Media.

        Only used with video media assets that contain audio.  Fade in of sound from no sound to the level specified
        in volume. How many seconds should the fade take. 0 means no fade.

        :param fade_start: The fade_start of this Media.
        :type: float
        """

        self._fade_start = fade_start

    @property
    def fade_end(self):
        """Gets the fade_end of this Media.

        Only used with video media assets that contain audio.  Fade out the sound from the level specified in volume
        to no sound. How many seconds should the fade take. 0 means no fade.

        :return: The fade_end of this Media.
        :rtype: float
        """
        return self._fade_end

    @fade_end.setter
    def fade_end(self, fade_end):
        """Sets the fade_end of this Media.

        Only used with video media assets that contain audio.  Fade out the sound from the level specified in volume
        to no sound. How many seconds should the fade take. 0 means no fade.

        :param fade_end: The fade_end of this Media.
        :type: float
        """

        self._fade_end = fade_end

    @property
    def volume(self):
        """Gets the volume of this Media.

        Only used with video media assets that contain audio.  How many dB to add to the level of the sound.

        :return: The volume of this Media.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Media.

        Only used with video media assets that contain audio.  How many dB to add to the level of the sound.

        :param volume: The volume of this Media.
        :type: float
        """

        self._volume = volume

    @property
    def sidechain_compression_affect(self):
        """Gets the sidechain_compression_affect of this Media.

        Only used with video media assets that contain audio.  Sidechain compression means other audio placeholders
        can change the level of the soundtrack's volume. Only placeholder that have
        `\"sidechain_compression_affect\":true` will affect the soundtrack's volume. True means this placeholder is
        one.

        :return: The sidechain_compression_affect of this Media.
        :rtype: bool
        """
        return self._sidechain_compression_affect

    @sidechain_compression_affect.setter
    def sidechain_compression_affect(self, sidechain_compression_affect):
        """Sets the sidechain_compression_affect of this Media.

        Only used with video media assets that contain audio.  Sidechain compression means other audio placeholders
        can change the level of the soundtrack's volume. Only placeholder that have
        `\"sidechain_compression_affect\":true` will affect the soundtrack's volume. True means this placeholder is
        one.

        :param sidechain_compression_affect: The sidechain_compression_affect of this Media.
        :type: bool
        """

        self._sidechain_compression_affect = sidechain_compression_affect

    @property
    def duration_referrer(self):
        """Gets the duration_referrer of this Media.

        Only used with video media assets.  This placeholder defines the duration of the scene. Only a single
        placeholder in a scene can use this. When the media of this placeholder is over + the `\"duration_addition\"`
        is over, the scene ends.

        :return: The duration_referrer of this Media.
        :rtype: bool
        """
        return self._duration_referrer

    @duration_referrer.setter
    def duration_referrer(self, duration_referrer):
        """Sets the duration_referrer of this Media.

        Only used with video media assets.  This placeholder defines the duration of the scene. Only a single
        placeholder in a scene can use this. When the media of this placeholder is over + the `\"duration_addition\"`
        is over, the scene ends.

        :param duration_referrer: The duration_referrer of this Media.
        :type: bool
        """

        self._duration_referrer = duration_referrer

    @property
    def duration_addition(self):
        """Gets the duration_addition of this Media.

        How many seconds to add or reduce to the duration of the scene on top of the end of the placeholder. Can only
        be used if `\"duration_referrer\": true`.

        :return: The duration_addition of this Media.
        :rtype: float
        """
        return self._duration_addition

    @duration_addition.setter
    def duration_addition(self, duration_addition):
        """Sets the duration_addition of this Media.

        How many seconds to add or reduce to the duration of the scene on top of the end of the placeholder. Can only
        be used if `\"duration_referrer\": true`.

        :param duration_addition: The duration_addition of this Media.
        :type: float
        """

        self._duration_addition = duration_addition

    @property
    def is_hidden(self):
        """Gets the is_hidden of this Media.

        Hide a placeholder so it's not processed and shown by using this parameter.

        :return: The is_hidden of this Media.
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this Media.

        Hide a placeholder so it's not processed and shown by using this parameter.

        :param is_hidden: The is_hidden of this Media.
        :type: bool
        """

        self._is_hidden = is_hidden

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Media):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
