# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint
import re

import six

from idomoo.models.soundtrack import Soundtrack
from idomoo.models.storyboard_metadata_data import StoryboardMetadataData


class StoryboardMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'storyboard_id': 'str',
        'thumbnail': 'str',
        'data': 'list[StoryboardMetadataData]',
        'soundtrack': 'Soundtrack'
    }

    attribute_map = {
        'storyboard_id': 'storyboard_id',
        'thumbnail': 'thumbnail',
        'data': 'data',
        'soundtrack': 'soundtrack'
    }

    def __init__(self, storyboard_id=None, thumbnail=None, data=None, soundtrack=None):
        """StoryboardMetadata - a model defined in Swagger"""

        self._storyboard_id = None
        self._thumbnail = None
        self._data = None
        self._soundtrack = None
        self.discriminator = None

        if storyboard_id is not None:
            self.storyboard_id = storyboard_id
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if data is not None:
            self.data = data
        if soundtrack is not None:
            self.soundtrack = soundtrack

    @property
    def storyboard_id(self):
        """Gets the storyboard_id of this StoryboardMetadata.


        :return: The storyboard_id of this StoryboardMetadata.
        :rtype: str
        """
        return self._storyboard_id

    @storyboard_id.setter
    def storyboard_id(self, storyboard_id):
        """Sets the storyboard_id of this StoryboardMetadata.


        :param storyboard_id: The storyboard_id of this StoryboardMetadata.
        :type: str
        """

        self._storyboard_id = storyboard_id

    @property
    def thumbnail(self):
        """Gets the thumbnail of this StoryboardMetadata.


        :return: The thumbnail of this StoryboardMetadata.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this StoryboardMetadata.


        :param thumbnail: The thumbnail of this StoryboardMetadata.
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def data(self):
        """Gets the data of this StoryboardMetadata.


        :return: The data of this StoryboardMetadata.
        :rtype: list[StoryboardMetadataData]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this StoryboardMetadata.


        :param data: The data of this StoryboardMetadata.
        :type: list[StoryboardMetadataData]
        """

        self._data = data

    @property
    def soundtrack(self):
        """Gets the soundtrack of this StoryboardMetadata.


        :return: The soundtrack of this StoryboardMetadata.
        :rtype: Soundtrack
        """
        return self._soundtrack

    @soundtrack.setter
    def soundtrack(self, soundtrack):
        """Sets the soundtrack of this StoryboardMetadata.


        :param soundtrack: The soundtrack of this StoryboardMetadata.
        :type: Soundtrack
        """

        self._soundtrack = soundtrack

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoryboardMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
