# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint
import re

import six

from idomoo import utils


class TextProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'color': 'str',
        'font_path': 'str',
        'scale': 'float',
        'baseline': 'float',
        'highlight': 'str',
        'strikethrough': 'bool',
        'underline': 'bool'
    }

    attribute_map = {
        'text': 'text',
        'color': 'color',
        'font_path': 'font_path',
        'scale': 'scale',
        'baseline': 'baseline',
        'highlight': 'highlight',
        'strikethrough': 'strikethrough',
        'underline': 'underline'
    }

    def __init__(self, text, color=None, font_path=None, scale=None, baseline=None, highlight=None,
                 strikethrough=None, underline=None):
        """TextProperties - a model defined in Swagger"""

        self._text = None
        self._color = None
        self._font_path = None
        self._scale = None
        self._baseline = None
        self._highlight = None
        self._strikethrough = None
        self._underline = None
        self.discriminator = None

        self.text = text
        if color is not None:
            self.color = color
        if font_path is not None:
            self.font_path = font_path
        if scale is not None:
            self.scale = scale
        if baseline is not None:
            self.baseline = baseline
        if highlight is not None:
            self.highlight = highlight
        if strikethrough is not None:
            self.strikethrough = strikethrough
        if underline is not None:
            self.underline = underline

    @property
    def text(self):
        """Gets the text of this TextProperties.

        The actual text string. Use `\\n` for newline character.

        :return: The text of this TextProperties.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TextProperties.

        The actual text string. Use `\\n` for newline character.

        :param text: The text of this TextProperties.
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def color(self):
        """Gets the color of this TextProperties.

        Overwrite the color for this part of the text.  Use this syntax: `\"rgb(###, ###, ###)\"`. Use 8bit color
        ranging from `0-255`.

        :return: The color of this TextProperties.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this TextProperties.

        Overwrite the color for this part of the text.  Use this syntax: `\"rgb(###, ###, ###)\"`. Use 8bit color
        ranging from `0-255`.

        :param color: The color of this TextProperties.
        :type: str
        """
        if color is not None and not re.search(utils.VALID_COLOR_REGEX, color):
            raise ValueError("Invalid value for `color`, must be a follow pattern or equal to `%s`"
                             % utils.VALID_COLOR_REGEX)

        self._color = color

    @property
    def font_path(self):
        """Gets the font_path of this TextProperties.

        Overwrite the font for this part of the text. Use a path.

        :return: The font_path of this TextProperties.
        :rtype: str
        """
        return self._font_path

    @font_path.setter
    def font_path(self, font_path):
        """Sets the font_path of this TextProperties.

        Overwrite the font for this part of the text. Use a path.

        :param font_path: The font_path of this TextProperties.
        :type: str
        """
        self._font_path = font_path

    @property
    def scale(self):
        """Gets the scale of this TextProperties.

        Multiplies the size found in \"font_size\" for this part of the text.

        :return: The scale of this TextProperties.
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this TextProperties.

        Multiplies the size found in \"font_size\" for this part of the text.

        :param scale: The scale of this TextProperties.
        :type: float
        """
        if scale is not None and scale < 0:
            raise ValueError("Invalid value for `scale`, must be a value greater than or equal to `0`")

        self._scale = scale

    @property
    def baseline(self):
        """Gets the baseline of this TextProperties.

        Shifts the vertical location of the text upward. A value of 1 is the size of the font.

        :return: The baseline of this TextProperties.
        :rtype: float
        """
        return self._baseline

    @baseline.setter
    def baseline(self, baseline):
        """Sets the baseline of this TextProperties.

        Shifts the vertical location of the text upward. A value of 1 is the size of the font.

        :param baseline: The baseline of this TextProperties.
        :type: float
        """

        self._baseline = baseline

    @property
    def highlight(self):
        """Gets the highlight of this TextProperties.

        Draw a colored box behind the text similar to a word processor highlight. Not passing this parameter means no
        highlight.  Enter the color you want. Use this syntax: `\"rgb(###, ###, ###)\"`. Use 8bit color ranging from
        `0-255`.

        :return: The highlight of this TextProperties.
        :rtype: str
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this TextProperties.

        Draw a colored box behind the text similar to a word processor highlight. Not passing this parameter means no
        highlight.  Enter the color you want. Use this syntax: `\"rgb(###, ###, ###)\"`. Use 8bit color ranging from
        `0-255`.

        :param highlight: The highlight of this TextProperties.
        :type: str
        """
        if highlight is not None and not re.search(utils.VALID_COLOR_REGEX, highlight):
            raise ValueError("Invalid value for `highlight`, must be a follow pattern or equal to `%s`"
                             % utils.VALID_COLOR_REGEX)

        self._highlight = highlight

    @property
    def strikethrough(self):
        """Gets the strikethrough of this TextProperties.

        Draw a line through the middle of the text.

        :return: The strikethrough of this TextProperties.
        :rtype: bool
        """
        return self._strikethrough

    @strikethrough.setter
    def strikethrough(self, strikethrough):
        """Sets the strikethrough of this TextProperties.

        Draw a line through the middle of the text.

        :param strikethrough: The strikethrough of this TextProperties.
        :type: bool
        """

        self._strikethrough = strikethrough

    @property
    def underline(self):
        """Gets the underline of this TextProperties.

        Draw a line at the baseline of the text.

        :return: The underline of this TextProperties.
        :rtype: bool
        """
        return self._underline

    @underline.setter
    def underline(self, underline):
        """Sets the underline of this TextProperties.

        Draw a line at the baseline of the text.

        :param underline: The underline of this TextProperties.
        :type: bool
        """

        self._underline = underline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TextProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
