# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint

import six


class JPGOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'height': 'int',
        'time': 'float',
        'suffix': 'str',
        'overlay': 'str',
        'overlay_alignment': 'list[str]',
        'overlay_scale': 'str',
        'label': 'str'
    }

    attribute_map = {
        'height': 'height',
        'time': 'time',
        'suffix': 'suffix',
        'overlay': 'overlay',
        'overlay_alignment': 'overlay_alignment',
        'overlay_scale': 'overlay_scale',
        'label': 'label'
    }

    def __init__(self, height=None, time=None, suffix=None, overlay=None, overlay_alignment=None, overlay_scale='fit',
                 label=None):
        """JPGOutput - a model defined in Swagger"""

        self._height = None
        self._time = None
        self._suffix = None
        self._overlay = None
        self._overlay_alignment = None
        self._overlay_scale = None
        self._label = None
        self.discriminator = None

        self.height = height
        self.time = time
        if suffix is not None:
            self.suffix = suffix
        if overlay is not None:
            self.overlay = overlay
        if overlay_alignment is not None:
            self.overlay_alignment = overlay_alignment
        if overlay_scale is not None:
            self.overlay_scale = overlay_scale
        if label is not None:
            self.label = label

    @property
    def height(self):
        """Gets the height of this JPGOutput.

        Height of the media to be rendered, in pixels. Should be the height of your scenes unless a smaller
        resolution is needed. Resolution higher than the scene resolution reduces quality. The width is automatically
        calculated to keep the aspect ratio.

        :return: The height of this JPGOutput.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this JPGOutput.

        Height of the media to be rendered, in pixels. Should be the height of your scenes unless a smaller
        resolution is needed. Resolution higher than the scene resolution reduces quality. The width is automatically
        calculated to keep the aspect ratio.

        :param height: The height of this JPGOutput.
        :type: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def time(self):
        """Gets the time of this JPGOutput.

        The frame of the video to render. Can also be negative number that will be calculated from the end of the video.

        :return: The time of this JPGOutput.
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this JPGOutput.

        The frame of the video to render. Can also be negative number that will be calculated from the end of the video.

        :param time: The time of this JPGOutput.
        :type: float
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def suffix(self):
        """Gets the suffix of this JPGOutput.

        Unique ending of the file name so several outputs can be created then identified. Required if there is more
        then 1 video output.

        :return: The suffix of this JPGOutput.
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this JPGOutput.

        Unique ending of the file name so several outputs can be created then identified. Required if there is more
        then 1 video output.

        :param suffix: The suffix of this JPGOutput.
        :type: str
        """

        self._suffix = suffix

    @property
    def overlay(self):
        """Gets the overlay of this JPGOutput.

        Path to overlay image, such as: play button or watermark.

        :return: The overlay of this JPGOutput.
        :rtype: str
        """
        return self._overlay

    @overlay.setter
    def overlay(self, overlay):
        """Sets the overlay of this JPGOutput.

        Path to overlay image, such as: play button or watermark.

        :param overlay: The overlay of this JPGOutput.
        :type: str
        """

        self._overlay = overlay

    @property
    def overlay_alignment(self):
        """Gets the overlay_alignment of this JPGOutput.

        Alignment for overlay image in case the image doesn’t fit the video perfectly. The first item in the array is
        X. The second is Y.

        :return: The overlay_alignment of this JPGOutput.
        :rtype: list[str]
        """
        return self._overlay_alignment

    @overlay_alignment.setter
    def overlay_alignment(self, overlay_alignment):
        """Sets the overlay_alignment of this JPGOutput.

        Alignment for overlay image in case the image doesn’t fit the video perfectly. The first item in the array is
        X. The second is Y.

        :param overlay_alignment: The overlay_alignment of this JPGOutput.
        :type: list[str]
        """
        allowed_values = ["left", "center", "right", "top", "middle", "bottom"]
        if not set(overlay_alignment).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `overlay_alignment` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(overlay_alignment) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._overlay_alignment = overlay_alignment

    @property
    def overlay_scale(self):
        """Gets the overlay_scale of this JPGOutput.

        Scale the overlay image if it's not the same size as the video. * Fit: scale the image up or down so it's
        completely visible in the video's resolution. If not the same aspect ratio, transparency is added around the
        image according to the alignment settings. * Fill: scale the image up or down so it completely fills the
        video. If not the same aspect ratio, the image is cropped according to the alignment settings.  * None: don't
        resize the overlay image.

        :return: The overlay_scale of this JPGOutput.
        :rtype: str
        """
        return self._overlay_scale

    @overlay_scale.setter
    def overlay_scale(self, overlay_scale):
        """Sets the overlay_scale of this JPGOutput.

        Scale the overlay image if it's not the same size as the video. * Fit: scale the image up or down so it's
        completely visible in the video's resolution. If not the same aspect ratio, transparency is added around the
        image according to the alignment settings. * Fill: scale the image up or down so it completely fills the
        video. If not the same aspect ratio, the image is cropped according to the alignment settings.  * None: don't
        resize the overlay image.

        :param overlay_scale: The overlay_scale of this JPGOutput.
        :type: str
        """
        allowed_values = ["fit", "fill", "none"]
        if overlay_scale not in allowed_values:
            raise ValueError(
                "Invalid value for `overlay_scale` ({0}), must be one of {1}"
                .format(overlay_scale, allowed_values)
            )

        self._overlay_scale = overlay_scale

    @property
    def label(self):
        """Gets the label of this JPGOutput.

        This label is another way to identify this specific output. The label is returned in the response,
        but does not appear in the file name.

        :return: The label of this JPGOutput.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this JPGOutput.

        This label is another way to identify this specific output. The label is returned in the response,
        but does not appear in the file name.

        :param label: The label of this JPGOutput.
        :type: str
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JPGOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
