# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint
import re

import six


class Audio(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'val': 'str',
        'start_time': 'float',
        'start_referrer': 'str',
        'mute': 'bool',
        'fade_start': 'float',
        'fade_end': 'float',
        'volume': 'float',
        'sidechain_compression_affect': 'bool',
        'duration_referrer': 'bool',
        'duration_addition': 'float'
    }

    attribute_map = {
        'key': 'key',
        'val': 'val',
        'start_time': 'start_time',
        'start_referrer': 'start_referrer',
        'mute': 'mute',
        'fade_start': 'fade_start',
        'fade_end': 'fade_end',
        'volume': 'volume',
        'sidechain_compression_affect': 'sidechain_compression_affect',
        'duration_referrer': 'duration_referrer',
        'duration_addition': 'duration_addition'
    }

    def __init__(self, key=None, val=None, start_time=None, start_referrer=None, mute=False, fade_start=None, fade_end=None, volume=None, sidechain_compression_affect=False, duration_referrer=False, duration_addition=None):
        """Audio - a model defined in Swagger"""

        self._key = None
        self._val = None
        self._start_time = None
        self._start_referrer = None
        self._mute = None
        self._fade_start = None
        self._fade_end = None
        self._volume = None
        self._sidechain_compression_affect = None
        self._duration_referrer = None
        self._duration_addition = None
        self.discriminator = None

        self.key = key
        self.val = val
        self.start_time = start_time
        if start_referrer is not None:
            self.start_referrer = start_referrer
        if mute is not None:
            self.mute = mute
        if fade_start is not None:
            self.fade_start = fade_start
        if fade_end is not None:
            self.fade_end = fade_end
        if volume is not None:
            self.volume = volume
        if sidechain_compression_affect is not None:
            self.sidechain_compression_affect = sidechain_compression_affect
        if duration_referrer is not None:
            self.duration_referrer = duration_referrer
        if duration_addition is not None:
            self.duration_addition = duration_addition

    @property
    def key(self):
        """Gets the key of this Audio.

        Name of placeholder from After Effects as it appears in the scene, or new name of your choosing.

        :return: The key of this Audio.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Audio.

        Name of placeholder from After Effects as it appears in the scene, or new name of your choosing.

        :param key: The key of this Audio.
        :type: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def val(self):
        """Gets the val of this Audio.

        The path to the audio file. Use a path to external files or files held on Idomoo servers. More about paths can be found [here](https://academy.idomoo.com/support/solutions/articles/4000068850).  Use a wav or mp3 file.

        :return: The val of this Audio.
        :rtype: str
        """
        return self._val

    @val.setter
    def val(self, val):
        """Sets the val of this Audio.

        The path to the audio file. Use a path to external files or files held on Idomoo servers. More about paths can be found [here](https://academy.idomoo.com/support/solutions/articles/4000068850).  Use a wav or mp3 file.

        :param val: The val of this Audio.
        :type: str
        """
        if val is None:
            raise ValueError("Invalid value for `val`, must not be `None`")
        if val is not None and not re.search('^(http|ual|pal)', val):
            raise ValueError("Invalid value for `val`, must be a follow pattern or equal to `/^(http|ual|pal)/`")

        self._val = val

    @property
    def start_time(self):
        """Gets the start_time of this Audio.

        The start time of the audio in seconds. Scene start is 0. Default for placeholders generated in After Effects is the time in After Effects. For placeholders generated on the call, default is 0.  If `\"start_referrer\"` is used this parameter turns to an offset parameter. By how much to offset the start of this placeholder from the end of another placeholder.

        :return: The start_time of this Audio.
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Audio.

        The start time of the audio in seconds. Scene start is 0. Default for placeholders generated in After Effects is the time in After Effects. For placeholders generated on the call, default is 0.  If `\"start_referrer\"` is used this parameter turns to an offset parameter. By how much to offset the start of this placeholder from the end of another placeholder.

        :param start_time: The start_time of this Audio.
        :type: float
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def start_referrer(self):
        """Gets the start_referrer of this Audio.

        Instead of using `\"start_time\"` the placeholder can start when another placeholder finishes. Write the `\"key\"` of this other placeholder here.

        :return: The start_referrer of this Audio.
        :rtype: str
        """
        return self._start_referrer

    @start_referrer.setter
    def start_referrer(self, start_referrer):
        """Sets the start_referrer of this Audio.

        Instead of using `\"start_time\"` the placeholder can start when another placeholder finishes. Write the `\"key\"` of this other placeholder here.

        :param start_referrer: The start_referrer of this Audio.
        :type: str
        """

        self._start_referrer = start_referrer

    @property
    def mute(self):
        """Gets the mute of this Audio.

        If you don't want to hear this audio, make this `true`.

        :return: The mute of this Audio.
        :rtype: bool
        """
        return self._mute

    @mute.setter
    def mute(self, mute):
        """Sets the mute of this Audio.

        If you don't want to hear this audio, make this `true`.

        :param mute: The mute of this Audio.
        :type: bool
        """

        self._mute = mute

    @property
    def fade_start(self):
        """Gets the fade_start of this Audio.

        Fade in of sound from no sound to the level specified in volume. How many seconds should the fade take. 0 means no fade.

        :return: The fade_start of this Audio.
        :rtype: float
        """
        return self._fade_start

    @fade_start.setter
    def fade_start(self, fade_start):
        """Sets the fade_start of this Audio.

        Fade in of sound from no sound to the level specified in volume. How many seconds should the fade take. 0 means no fade.

        :param fade_start: The fade_start of this Audio.
        :type: float
        """

        self._fade_start = fade_start

    @property
    def fade_end(self):
        """Gets the fade_end of this Audio.

        Fade out the sound from the level specified in volume to no sound. How many seconds should the fade take. 0 means no fade.

        :return: The fade_end of this Audio.
        :rtype: float
        """
        return self._fade_end

    @fade_end.setter
    def fade_end(self, fade_end):
        """Sets the fade_end of this Audio.

        Fade out the sound from the level specified in volume to no sound. How many seconds should the fade take. 0 means no fade.

        :param fade_end: The fade_end of this Audio.
        :type: float
        """

        self._fade_end = fade_end

    @property
    def volume(self):
        """Gets the volume of this Audio.

        How many dB to add to the level of the sound.

        :return: The volume of this Audio.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Audio.

        How many dB to add to the level of the sound.

        :param volume: The volume of this Audio.
        :type: float
        """

        self._volume = volume

    @property
    def sidechain_compression_affect(self):
        """Gets the sidechain_compression_affect of this Audio.

        Sidechain compression means other audio placeholders can change the level of the soundtrack's volume. Only placeholder that have `\"sidechain_compression_affect\":true` will affect the soundtrack's volume. True means this placeholder is one.

        :return: The sidechain_compression_affect of this Audio.
        :rtype: bool
        """
        return self._sidechain_compression_affect

    @sidechain_compression_affect.setter
    def sidechain_compression_affect(self, sidechain_compression_affect):
        """Sets the sidechain_compression_affect of this Audio.

        Sidechain compression means other audio placeholders can change the level of the soundtrack's volume. Only placeholder that have `\"sidechain_compression_affect\":true` will affect the soundtrack's volume. True means this placeholder is one.

        :param sidechain_compression_affect: The sidechain_compression_affect of this Audio.
        :type: bool
        """

        self._sidechain_compression_affect = sidechain_compression_affect

    @property
    def duration_referrer(self):
        """Gets the duration_referrer of this Audio.

        This placeholder defines the duration of the scene. Only a single placeholder in a scene can use this. When the media of this placeholder is over + the `\"duration_addition\"` is over, the scene ends.

        :return: The duration_referrer of this Audio.
        :rtype: bool
        """
        return self._duration_referrer

    @duration_referrer.setter
    def duration_referrer(self, duration_referrer):
        """Sets the duration_referrer of this Audio.

        This placeholder defines the duration of the scene. Only a single placeholder in a scene can use this. When the media of this placeholder is over + the `\"duration_addition\"` is over, the scene ends.

        :param duration_referrer: The duration_referrer of this Audio.
        :type: bool
        """

        self._duration_referrer = duration_referrer

    @property
    def duration_addition(self):
        """Gets the duration_addition of this Audio.

        How many seconds to add or reduce to the duration of the scene on top of the end of the placeholder. Can only be used if `\"duration_referrer\": true`.

        :return: The duration_addition of this Audio.
        :rtype: float
        """
        return self._duration_addition

    @duration_addition.setter
    def duration_addition(self, duration_addition):
        """Sets the duration_addition of this Audio.

        How many seconds to add or reduce to the duration of the scene on top of the end of the placeholder. Can only be used if `\"duration_referrer\": true`.

        :param duration_addition: The duration_addition of this Audio.
        :type: float
        """

        self._duration_addition = duration_addition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Audio):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
