# coding: utf-8

"""
    Idomoo API



    OpenAPI spec version: 2.0
    Contact: dev.support@idomoo.com

"""


import pprint
import re

import six

from idomoo.models.output_response import OutputResponse


class GenerationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'output': 'OutputResponse',
        'unique_id': 'str',
        'request_id': 'str',
        'total_cost': 'int',
        'check_status_url': 'str'
    }

    attribute_map = {
        'status': 'status',
        'output': 'output',
        'unique_id': 'unique_id',
        'request_id': 'request_id',
        'total_cost': 'total_cost',
        'check_status_url': 'check_status_url'
    }

    def __init__(self, status=None, output=None, unique_id=None, request_id=None, total_cost=None, check_status_url=None):
        """GenerationResponse - a model defined in Swagger"""

        self._status = None
        self._output = None
        self._unique_id = None
        self._request_id = None
        self._total_cost = None
        self._check_status_url = None
        self.discriminator = None

        self.status = status
        self.output = output
        self.unique_id = unique_id
        self.request_id = request_id
        self.total_cost = total_cost
        self.check_status_url = check_status_url

    @property
    def status(self):
        """Gets the status of this GenerationResponse.

        Status of the response. Success means all checks past, but render hasn't happened yet. Render should pass successfully as well, except for in extreme cases. More on that under `\"check_status_url\"`.

        :return: The status of this GenerationResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GenerationResponse.

        Status of the response. Success means all checks past, but render hasn't happened yet. Render should pass successfully as well, except for in extreme cases. More on that under `\"check_status_url\"`.

        :param status: The status of this GenerationResponse.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")
        allowed_values = ["Success", "GENERATION_FAILED", "Error"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def output(self):
        """Gets the output of this GenerationResponse.


        :return: The output of this GenerationResponse.
        :rtype: OutputResponse
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this GenerationResponse.


        :param output: The output of this GenerationResponse.
        :type: OutputResponse
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")

        self._output = output

    @property
    def unique_id(self):
        """Gets the unique_id of this GenerationResponse.

        The specific base file name for all outputs generated with the statics ID and account ID.

        :return: The unique_id of this GenerationResponse.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this GenerationResponse.

        The specific base file name for all outputs generated with the statics ID and account ID.

        :param unique_id: The unique_id of this GenerationResponse.
        :type: str
        """
        if unique_id is None:
            raise ValueError("Invalid value for `unique_id`, must not be `None`")

        self._unique_id = unique_id

    @property
    def request_id(self):
        """Gets the request_id of this GenerationResponse.

        ID of this specific request. Helps Idomoo support find the call if issues happen.

        :return: The request_id of this GenerationResponse.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this GenerationResponse.

        ID of this specific request. Helps Idomoo support find the call if issues happen.

        :param request_id: The request_id of this GenerationResponse.
        :type: str
        """
        if request_id is None:
            raise ValueError("Invalid value for `request_id`, must not be `None`")

        self._request_id = request_id

    @property
    def total_cost(self):
        """Gets the total_cost of this GenerationResponse.

        How many credits were used up in this call for all the outputs generated. A credit is up to 30 seconds of rendered video.

        :return: The total_cost of this GenerationResponse.
        :rtype: int
        """
        return self._total_cost

    @total_cost.setter
    def total_cost(self, total_cost):
        """Sets the total_cost of this GenerationResponse.

        How many credits were used up in this call for all the outputs generated. A credit is up to 30 seconds of rendered video.

        :param total_cost: The total_cost of this GenerationResponse.
        :type: int
        """
        if total_cost is None:
            raise ValueError("Invalid value for `total_cost`, must not be `None`")

        self._total_cost = total_cost

    @property
    def check_status_url(self):
        """Gets the check_status_url of this GenerationResponse.

        As Idomoo's API is asynchronous, when you get a successful response it only means the API call was checked, passed, and added to the render queue. To check if the video is rendered, check this URL's status. More about this [here](https://academy.idomoo.com/support/solutions/articles/4000110613).

        :return: The check_status_url of this GenerationResponse.
        :rtype: str
        """
        return self._check_status_url

    @check_status_url.setter
    def check_status_url(self, check_status_url):
        """Sets the check_status_url of this GenerationResponse.

        As Idomoo's API is asynchronous, when you get a successful response it only means the API call was checked, passed, and added to the render queue. To check if the video is rendered, check this URL's status. More about this [here](https://academy.idomoo.com/support/solutions/articles/4000110613).

        :param check_status_url: The check_status_url of this GenerationResponse.
        :type: str
        """
        if check_status_url is None:
            raise ValueError("Invalid value for `check_status_url`, must not be `None`")

        self._check_status_url = check_status_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
